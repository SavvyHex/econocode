# EconoCode

A toy compiler that transforms arithmetic expressions into intermediate representation (IR) code.

## Overview

EconoCode is a simple compiler frontend that demonstrates the basic stages of compilation:
1. **Lexical Analysis** - Tokenizes input using the Logos crate
2. **Parsing** - Converts tokens to Abstract Syntax Tree (AST) using LALRPOP
3. **Lowering** - Transforms AST into intermediate representation with energy estimation
4. **Execution** - Interprets the IR to run the code

## Supported Language Features

The language supports basic arithmetic expressions with type annotations:
- **Integer literals** with types: `42i32`, `123i64` (defaults to `i64`)
- **Variables** with types: `x: i32`, `myVar: i64` (defaults to `i64`)
- **Binary operations**: `+`, `-`, `*`, `/`
- **Parentheses** for grouping: `(2 + 3) * 4`
- **Type-aware energy estimation**: Different costs for `i32` vs `i64` operations

## Examples

```bash
# 32-bit operations (lower energy cost)
./target/debug/econocode - <<< "2i32 + 3i32"
# Output: Energy ~3 units

# 64-bit operations (higher energy cost)  
./target/debug/econocode - <<< "2i64 * 3i64"
# Output: Energy ~7 units

# Variables with types
./target/debug/econocode - <<< "x: i32 + 5i32"
```

## Example

Input file (`example.txt`):
```
(2 + 3) * x
```

Output IR:
```
t0 = const 2
t1 = const 3
t2 = add t0, t1
t3 = x
t4 = mul t2, t3
Result in t4
```

## Architecture

- **`src/lexer.rs`** - Token definitions and lexical analysis
- **`src/parser.lalrpop`** - Grammar specification for LALRPOP parser
- **`src/ast.rs`** - Abstract Syntax Tree node definitions
- **`src/lower.rs`** - AST to IR transformation logic
- **`src/ir.rs`** - Intermediate representation definitions
- **`src/main.rs`** - Command-line interface and compilation pipeline

## Dependencies

- **LALRPOP** - LR(1) parser generator
- **Logos** - Fast lexer generator
- **Clap** - Command-line argument parsing

## License

See [LICENSE](LICENSE) file for details.